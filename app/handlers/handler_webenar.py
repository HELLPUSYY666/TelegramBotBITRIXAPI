from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
import app.keyboards.keyboards as kb
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
from app.keyboards import keyboard_webenar as webenar_kb

router = Router()


class WebinarRegistration(StatesGroup):
    full_name = State()
    phone = State()
    email = State()
    region = State()
    specialty = State()


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=webenar_kb.main_menu)


@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=webenar_kb.main_menu)


@router.message(F.text == "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä")
async def register_webinar(message: Message, state: FSMContext):
    await state.set_state(WebinarRegistration.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û*:", reply_markup=webenar_kb.back_button)


@router.message(WebinarRegistration.full_name)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(WebinarRegistration.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:", reply_markup=webenar_kb.back_button)


@router.message(WebinarRegistration.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(WebinarRegistration.email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *E-mail*:", reply_markup=webenar_kb.back_button)


@router.message(WebinarRegistration.email)
async def get_email(message: Message, state: FSMContext):
    if "@" not in message.text or "." not in message.text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!")
        return
    await state.update_data(email=message.text)
    await state.set_state(WebinarRegistration.region)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *—Ä–µ–≥–∏–æ–Ω*:", reply_markup=webenar_kb.back_button)


@router.message(WebinarRegistration.region)
async def get_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await state.set_state(WebinarRegistration.specialty)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å*:", reply_markup=webenar_kb.back_button)


@router.message(WebinarRegistration.specialty)
async def get_specialty(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_data["specialty"] = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å (–ø—Ä–∏–º–µ—Ä)
    # send_to_bitrix(user_data)
    user = await rq.save_user_data(user_data, tg_id=message.from_user.id)

    await message.answer(
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä!\n\n"
        f"üë§ *–§–ò–û*: {user_data['full_name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {user_data['phone']}\n"
        f"üìß *Email*: {user_data['email']}\n"
        f"üåç *–†–µ–≥–∏–æ–Ω*: {user_data['region']}\n"
        f"üíº *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å*: {user_data['specialty']}\n",
        reply_markup=webenar_kb.confirm_kb
    )
    await state.clear()
